generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  image     String
  email     String   @unique
  createdAt DateTime @default(now())
  emailVerified Boolean?
  cars      Car[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  scope              String?
  token_type        String?
  id_token          String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Car {
  id          String        @id @default(cuid()) @map("_id")
  userId      String
  make        String
  model       String
  year        Int
  maintenance Maintenance[]
  user        User          @relation(fields: [userId], references: [id])
}

model Maintenance {
  id          String   @id @default(cuid()) @map("_id")
  carId       String
  date        DateTime
  note        String?
  mileage     Int
  works       Work[]
  typeId      String
  type        MaintenanceType @relation(fields: [typeId], references: [id])

  car         Car      @relation(fields: [carId], references: [id])
}

model Work {
  id            String     @id @default(cuid()) @map("_id")
  maintenanceId String
  name          String
  price         Float
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
}

model MaintenanceType {
  id   String @id @default(cuid()) @map("_id")
  name String @unique
  maintenances Maintenance[]
}